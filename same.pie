#lang pie

(claim + (-> Nat Nat Nat))
(define +
  (lambda (a b)
    (iter-Nat a
      b
      (lambda (n) (add1 n)))))

(claim incr (-> Nat Nat))
(define incr
  (lambda (n)
    (iter-Nat n 1 (+ 1))))

(claim +1=add1
  (Pi ((n Nat))
      (= Nat (+ 1 n) (add1 n))))
(define +1=add1
  (lambda (n)
    (same (add1 n))))

(claim mot-incr=add1 (-> Nat U))
(define mot-incr=add1
  (lambda (n)
    (= Nat (incr n) (add1 n))))

(claim step-incr=add1 
  (Pi ((n-1 Nat))
      (-> (= Nat (incr n-1) (add1 n-1))
          (= Nat (incr (add1 n-1)) (add1 (add1 n-1))))))
(define step-incr=add1 
  (lambda (n-1 almost)
    (cong almost (+ 1))))

(claim incr=add1
   (Pi ((n Nat))
       (= Nat (incr n) (add1 n))))
(define incr=add1
  (lambda (n)
    (ind-Nat n
             mot-incr=add1
             (same (add1 zero))
             step-incr=add1)))

(claim sandwich (-> Atom Atom))
(define sandwich (lambda (name) 'delicious))

(claim sandwiches
  (Pi ((a Atom) (b Atom))
      (= Atom (sandwich a) (sandwich b))))
(define sandwiches 
  (lambda (a b) (same 'delicious)))


'done
(incr=add1 1000)
(sandwiches 'hoagie 'grinder)

