#lang pie

;; Ch 7, peas

(claim + (-> Nat Nat Nat))
(define +
  (lambda (a b)
    (iter-Nat a
      b
      (lambda (n) (add1 n)))))

(claim mot-peas
  (-> Nat U))
(define mot-peas
  (lambda (n)
      (Vec Atom n)))

(claim step-peas
       (Pi ((n-1 Nat))
           (-> (mot-peas n-1)
               (mot-peas (add1 n-1)))))
(define step-peas
  (lambda (n)
    (lambda (almost) (vec:: 'pea almost))))

(claim peas
  (Pi ((n Nat))
    (Vec Atom n)))
(define peas
  (lambda (n)
    (ind-Nat
      n
      mot-peas
      vecnil
      step-peas)))

(claim mot-range (-> Nat U))
(define mot-range
   (lambda (n) (Vec Nat n)))

(claim step-range
    (Pi ((n-1 Nat))
        (-> (mot-range n-1)
            (mot-range (add1 n-1)))))
(define step-range
  (lambda (n-1 almost)
    (vec:: (add1 n-1) almost)))

(claim range
  (Pi ((n Nat)) (Vec Nat n)))
(define range
  (lambda (n)
    (ind-Nat n
        mot-range
        vecnil
        step-range)))

(claim longlength (-> Nat U))
(define longlength
  (lambda (n) (Vec Nat (+ 5 n))))

(claim longrange
       (Pi ((n Nat)) (Vec Nat (+ 5 n))))
(define longrange
  (lambda (n)
    (ind-Nat n
             (lambda (step) (Vec Nat (+ 5 step)))
             (range 5)
             (lambda (n-1 almost) (vec:: (+ 6 n-1) almost)))))

(longrange 2)

