#lang pie


;; Ch 7, last


(claim mot-peas
  (-> Nat U))
(define mot-peas
  (lambda (n)
      (Vec Atom n)))

(claim step-peas
       (Pi ((n-1 Nat))
           (-> (mot-peas n-1)
               (mot-peas (add1 n-1)))))
(define step-peas
  (lambda (n)
    (lambda (almost) (vec:: 'pea almost))))

(claim peas
  (Pi ((n Nat))
    (Vec Atom n)))
(define peas
  (lambda (n)
    (ind-Nat
      n
      mot-peas
      vecnil
      step-peas)))

(claim mot-range (-> Nat U))
(define mot-range
   (lambda (n) (Vec Nat n)))

(claim step-range
    (Pi ((n-1 Nat))
        (-> (mot-range n-1)
            (mot-range (add1 n-1)))))
(define step-range
  (lambda (n-1 almost)
    (vec:: (add1 n-1) almost)))

(claim range
  (Pi ((n Nat)) (Vec Nat n)))
(define range
  (lambda (n)
    (ind-Nat n
        mot-range
        vecnil
        step-range)))


(claim mot-last-nat
  (-> Nat U))
(define mot-last-nat
  (lambda (l-1)
    (-> (Vec Nat (add1 l-1)) Nat)))

(claim step-last-nat
  (Pi ((n-1 Nat))
    (-> (mot-last-nat n-1) (mot-last-nat (add1 n-1)))))
(define step-last-nat
  (lambda (n-1 almost)
    (lambda (lis) (almost (tail lis)))))

(claim last-Nat
  (Pi ((l-1 Nat))
      (mot-last-nat l-1)))
(define last-Nat
  (lambda (l-1)
    (ind-Nat l-1
             mot-last-nat
             (lambda (l) (head l))
             step-last-nat)))

(claim mot-last
  (-> U Nat U))
(define mot-last
  (lambda (e l-1)
    (-> (Vec e (add1 l-1)) e)))

(claim step-last
  (Pi ((E U) (n-1 Nat))
    (-> (mot-last E n-1) (mot-last E (add1 n-1)))))
(define step-last
  (lambda (e n-1 almost)
    (lambda (lis) (almost (tail lis)))))

(claim last
  (Pi ((E U) (l-1 Nat))
      (mot-last E l-1)))
(define last
  (lambda (e l-1)
    (ind-Nat l-1
             (mot-last e)
             (lambda (l) (head l))
             (step-last e))))




(last Nat 4 (range 5))
(last Atom 4 (peas 5))
